module SingleSigWallet_Template imports common {

  type ImmutableState = Struct [
    publicKey: Ed25519PublicKey
  ];

  type MutableState = Struct [
  ]

  type SelfSpawn_Payload = Struct [
    gasPrice: GasPrice,
    immutableState: ImmutableState,
    signature: Ed25519Sig
  ];

  type Spawn_Payload = Struct [
    gasPrice: GasPrice,
    nonce: Nonce,
    immutableState: PrefixedWrapper,
    signature: Ed25519Sig
  ];

  type LocalMethodCall_Payload = Struct [
    gasPrice: GasPrice,
    nonce: Nonce,
    methodArgs: PrefixedWrapper,
    signature: Ed25519Sig
  ]

  behaviour Mount implements TemplateMountAPI[ImmutableState,MutableState] {

    fun parsePayload(tx: Transaction): ParsedPayload throws ParsingError {
      switch typeOf(tx) {
        case SelfSpawnTx: Quipu.parse[SelfSpawn_Payload](tx.payload)
        case SpawnTx: Quipu.parse[Spawn_Payload](tx.payload)
        case LocalMethodCall: Quipu.parse[LocalMethodCall_Payload](tx.payload)
        case ForeignMethodCallTx: throw Error("Not supported in this version of SVM")
        case TemplateDeployTx: throw Error("Not supported in this version of SVM")
      }
    }

    @autogenerated
    fun maxSpend(methodSelector: Int, accountImmutableState: IS, parsedPayload: ParsedPayload): CoinAmount

    fun verifyTx(accountImmutableState: IS, txSerialized: Wrapper, tx: Transaction, parsedPayload: ParsedPayload): Boolean {
      val sigSize: u16 = Quipu.serializedSizeOf(parsedPayload.nativePayload.signature)
      val signedData: Wrapper = txSerialized.dropBytesRight(sigSize)
      return vm.signatureValidation(signedData, immutableState.publicKey, parsedPayload.nativePayload.signature)
    }

    fun parseImmutableState(wrapper: Wrapper): ImmutableState {
      return vm.quipuParse[ImmutableState](wrapper)
    }

    @autogenerated
    fun parseCallArgs[T](methodSelector: u16, wrapper: Wrapper): T

    @autogenerated
    fun instanceMethods(): Seq[u16]

    @autogenerated
    fun methodSignature(methodId: u16): InstanceMethodSignature

    fun accountCreationHandler(accountAddress: Address, immutableState: ImmutableState, creator: Account): MutableState {
      //no special processing here
      return MutableState()
    }
  }

  module instance_methods {

    @methodSelector=16
    @maxSpend={amount}
    fun spend(recipient: Address, amount: CoinAmount) {
      hostAPI.transfer(recipient, amount)
    }

  }

}

